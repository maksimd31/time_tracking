"""
Pytest —Ç–µ—Å—Ç—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è Celery –∑–∞–¥–∞—á.
"""

import pytest
from unittest.mock import patch, MagicMock
from django.contrib.auth.models import User
from django.utils import timezone
from celery.exceptions import Retry

from time_tracking_or.tasks import send_feedback_email_task, cleanup_old_feedback_attempts
from time_tracking_or.models import ProjectRating


@pytest.mark.celery
class TestSendFeedbackEmailTask:
    """–¢–µ—Å—Ç—ã –¥–ª—è –∑–∞–¥–∞—á–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ email."""
    
    @pytest.fixture
    def user(self, db):
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤."""
        return User.objects.create_user(
            username='celery_test_user',
            email='celery@test.com',
            password='testpass123'
        )
    
    def test_send_feedback_email_success(self, user):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ email."""
        with patch('time_tracking_or.tasks.send_mail') as mock_send_mail:
            mock_send_mail.return_value = None  # send_mail –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
            
            result = send_feedback_email_task(user.id, '–û—Ç–ª–∏—á–Ω—ã–π –ø—Ä–æ–µ–∫—Ç!')
            
            assert result['success'] is True
            assert '—É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' in result['message']
            assert result['user_id'] == user.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ send_mail –±—ã–ª –≤—ã–∑–≤–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ
            mock_send_mail.assert_called_once()
            call_kwargs = mock_send_mail.call_args[1]
            
            assert 'maksimdis31@icloud.com' in call_kwargs['recipient_list']
            assert user.username in call_kwargs['subject']
            assert '–û—Ç–ª–∏—á–Ω—ã–π –ø—Ä–æ–µ–∫—Ç!' in call_kwargs['message']
            assert user.email in call_kwargs['message']
    
    def test_send_feedback_email_user_not_found(self):
        """–¢–µ—Å—Ç —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
        result = send_feedback_email_task(999999, '–¢–µ—Å—Ç')
        
        assert result['success'] is False
        assert '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' in result['message']
        assert result['user_id'] == 999999
    
    def test_send_feedback_email_retry_on_failure(self, user):
        """–¢–µ—Å—Ç retry –ª–æ–≥–∏–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏."""
        with patch('time_tracking_or.tasks.send_mail') as mock_send_mail:
            mock_send_mail.side_effect = Exception('SMTP connection failed')
            
            # –ú–æ–∫–∏—Ä—É–µ–º retry –º–µ—Ç–æ–¥
            with patch.object(send_feedback_email_task, 'retry') as mock_retry:
                mock_retry.side_effect = Retry('Retrying...')
                
                with pytest.raises(Retry):
                    send_feedback_email_task(user.id, 'Test retry')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ retry –±—ã–ª –≤—ã–∑–≤–∞–Ω
                mock_retry.assert_called_once()
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã retry
                retry_kwargs = mock_retry.call_args[1]
                assert retry_kwargs['countdown'] == 60  # exponential backoff
                assert retry_kwargs['max_retries'] == 3
    
    def test_send_feedback_email_max_retries_exceeded(self, user):
        """–¢–µ—Å—Ç –∫–æ–≥–¥–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫."""
        with patch('time_tracking_or.tasks.send_mail') as mock_send_mail:
            mock_send_mail.side_effect = Exception('Persistent SMTP error')
            
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ retry –ª–∏–º–∏—Ç–∞
            with patch.object(send_feedback_email_task, 'retry') as mock_retry:
                mock_retry.side_effect = send_feedback_email_task.MaxRetriesExceededError()
                
                result = send_feedback_email_task(user.id, 'Test max retries')
                
                assert result['success'] is False
                assert '–ø—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫' in result['message']
    
    def test_send_feedback_email_content_formatting(self, user):
        """–¢–µ—Å—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ email."""
        with patch('time_tracking_or.tasks.send_mail') as mock_send_mail:
            comment = '–î–æ–±–∞–≤—å—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö!'
            
            send_feedback_email_task(user.id, comment)
            
            call_kwargs = mock_send_mail.call_args[1]
            message = call_kwargs['message']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –Ω—É–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
            assert f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username}' in message
            assert f'Email: {user.email}' in message
            assert comment in message
            assert '–î–∞—Ç–∞:' in message
            assert '–ü–æ–∂–µ–ª–∞–Ω–∏—è:' in message
    
    @pytest.mark.parametrize("comment", [
        '–ü—Ä–æ—Å—Ç–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π',
        '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å —ç–º–æ–¥–∑–∏ üöÄüíª',
        '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π\n—Å\n–ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏\n—Å—Ç—Ä–æ–∫',
        '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å "–∫–∞–≤—ã—á–∫–∞–º–∏" –∏ \'–∞–ø–æ—Å—Ç—Ä–æ—Ñ–∞–º–∏\'',
        '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å <html>—Ç–µ–≥–∞–º–∏</html>',
        '–ê' * 1000,  # –î–ª–∏–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    ])
    def test_send_feedback_email_various_comments(self, user, comment):
        """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ email —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤."""
        with patch('time_tracking_or.tasks.send_mail') as mock_send_mail:
            result = send_feedback_email_task(user.id, comment)
            
            assert result['success'] is True
            mock_send_mail.assert_called_once()
            
            call_kwargs = mock_send_mail.call_args[1]
            assert comment in call_kwargs['message']


@pytest.mark.celery
class TestCleanupOldFeedbackAttemptsTask:
    """–¢–µ—Å—Ç—ã –¥–ª—è –∑–∞–¥–∞—á–∏ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –ø–æ–ø—ã—Ç–æ–∫."""
    
    @pytest.fixture
    def users_and_ratings(self, db):
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ä–µ–π—Ç–∏–Ω–≥–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤."""
        users = []
        ratings = []
        
        for i in range(3):
            user = User.objects.create_user(
                username=f'cleanup_user_{i}',
                email=f'cleanup{i}@test.com',
                password='testpass123'
            )
            users.append(user)
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (7+ –¥–Ω–µ–π –Ω–∞–∑–∞–¥)
        old_time = timezone.now() - timezone.timedelta(days=8)
        for i in range(2):
            rating = ProjectRating.objects.create(
                user=users[i],
                rating='like',
                comment=f'–°—Ç–∞—Ä—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π {i}',
                email_sent=False,
                email_sent_at=old_time
            )
            ratings.append(rating)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å (–º–µ–Ω–µ–µ 7 –¥–Ω–µ–π)
        new_time = timezone.now() - timezone.timedelta(days=3)
        rating = ProjectRating.objects.create(
            user=users[2],
            rating='dislike',
            comment='–ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π',
            email_sent=False,
            email_sent_at=new_time
        )
        ratings.append(rating)
        
        # –°–æ–∑–¥–∞–µ–º —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å (–Ω–µ –¥–æ–ª–∂–Ω–∞ —É–¥–∞–ª—è—Ç—å—Å—è)
        sent_rating = ProjectRating.objects.create(
            user=users[0],
            rating='like',
            comment='–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π',
            email_sent=True,
            email_sent_at=old_time
        )
        ratings.append(sent_rating)
        
        return users, ratings
    
    def test_cleanup_old_feedback_attempts_success(self, users_and_ratings):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –ø–æ–ø—ã—Ç–æ–∫."""
        users, ratings = users_and_ratings
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        assert ProjectRating.objects.count() == 4
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É
        result = cleanup_old_feedback_attempts()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        assert result['success'] is True
        assert result['deleted_count'] == 2  # –î–æ–ª–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å 2 —Å—Ç–∞—Ä—ã–µ –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Å—Ç–∞–ª–∏—Å—å —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        remaining_ratings = ProjectRating.objects.all()
        assert remaining_ratings.count() == 2
        
        # –î–æ–ª–∂–Ω–∞ –æ—Å—Ç–∞—Ç—å—Å—è –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å
        remaining_ids = set(remaining_ratings.values_list('id', flat=True))
        expected_ids = {ratings[2].id, ratings[3].id}  # –Ω–æ–≤–∞—è –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è
        assert remaining_ids == expected_ids
    
    def test_cleanup_old_feedback_attempts_no_old_records(self, db):
        """–¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ –∫–æ–≥–¥–∞ –Ω–µ—Ç —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π."""
        # –°–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏
        user = User.objects.create_user(
            username='new_user',
            email='new@test.com',
            password='testpass123'
        )
        
        ProjectRating.objects.create(
            user=user,
            rating='like',
            comment='–ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π',
            email_sent=False,
            email_sent_at=timezone.now()
        )
        
        result = cleanup_old_feedback_attempts()
        
        assert result['success'] is True
        assert result['deleted_count'] == 0
        assert ProjectRating.objects.count() == 1
    
    def test_cleanup_old_feedback_attempts_empty_db(self, db):
        """–¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ –ø—É—Å—Ç–æ–π –±–∞–∑—ã."""
        result = cleanup_old_feedback_attempts()
        
        assert result['success'] is True
        assert result['deleted_count'] == 0
    
    def test_cleanup_old_feedback_attempts_only_sent_records(self, db):
        """–¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ –∫–æ–≥–¥–∞ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏."""
        user = User.objects.create_user(
            username='sent_user',
            email='sent@test.com',
            password='testpass123'
        )
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ä—É—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å
        old_time = timezone.now() - timezone.timedelta(days=10)
        ProjectRating.objects.create(
            user=user,
            rating='like',
            comment='–°—Ç–∞—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π',
            email_sent=True,
            email_sent_at=old_time
        )
        
        result = cleanup_old_feedback_attempts()
        
        assert result['success'] is True
        assert result['deleted_count'] == 0
        assert ProjectRating.objects.count() == 1


@pytest.mark.integration 
@pytest.mark.celery
class TestCeleryTasksIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è Celery –∑–∞–¥–∞—á."""
    
    def test_email_task_and_cleanup_integration(self, db):
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–æ–π email –∏ –æ—á–∏—Å—Ç–∫–æ–π."""
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = User.objects.create_user(
            username='integration_user',
            email='integration@test.com',
            password='testpass123'
        )
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥
        rating = ProjectRating.objects.create(
            user=user,
            rating='like',
            comment='–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π',
            email_sent=False
        )
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É email (—Å–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ä—É—é –ø–æ–ø—ã—Ç–∫—É)
        old_time = timezone.now() - timezone.timedelta(days=8)
        rating.email_sent_at = old_time
        rating.save()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É
        cleanup_result = cleanup_old_feedback_attempts()
        
        # –ó–∞–ø–∏—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–∞
        assert cleanup_result['success'] is True
        assert cleanup_result['deleted_count'] == 1
        assert not ProjectRating.objects.filter(id=rating.id).exists()
    
    @patch('time_tracking_or.tasks.send_mail')
    def test_successful_email_prevents_cleanup(self, mock_send_mail, db):
        """–¢–µ—Å—Ç —á—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ email –Ω–µ —É–¥–∞–ª—è—é—Ç—Å—è –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ."""
        user = User.objects.create_user(
            username='success_user',
            email='success@test.com', 
            password='testpass123'
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —á–µ—Ä–µ–∑ –∑–∞–¥–∞—á—É
        result = send_feedback_email_task(user.id, '–£—Å–ø–µ—à–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π')
        assert result['success'] is True
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –∫–∞–∫ –±—É–¥—Ç–æ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        old_time = timezone.now() - timezone.timedelta(days=8)
        rating = ProjectRating.objects.create(
            user=user,
            rating='like',
            comment='–£—Å–ø–µ—à–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π',
            email_sent=True,  # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π
            email_sent_at=old_time
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É
        cleanup_result = cleanup_old_feedback_attempts()
        
        # –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–∞
        assert ProjectRating.objects.filter(id=rating.id).exists()


@pytest.mark.slow
@pytest.mark.celery
class TestCeleryTasksPerformance:
    """–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Celery –∑–∞–¥–∞—á."""
    
    def test_cleanup_large_dataset(self, db):
        """–¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π."""
        # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∑–∞–ø–∏—Å–µ–π
        users = []
        for i in range(50):
            user = User.objects.create_user(
                username=f'perf_user_{i}',
                email=f'perf{i}@test.com',
                password='testpass123'
            )
            users.append(user)
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
        old_time = timezone.now() - timezone.timedelta(days=8)
        for user in users:
            ProjectRating.objects.create(
                user=user,
                rating='like',
                comment=f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç {user.username}',
                email_sent=False,
                email_sent_at=old_time
            )
        
        import time
        start_time = time.time()
        
        result = cleanup_old_feedback_attempts()
        
        end_time = time.time()
        execution_time = end_time - start_time
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—à–ª–∞ –±—ã—Å—Ç—Ä–æ (–º–µ–Ω–µ–µ 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è 50 –∑–∞–ø–∏—Å–µ–π)
        assert execution_time < 5.0
        assert result['success'] is True
        assert result['deleted_count'] == 50