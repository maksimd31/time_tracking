"""
Django settings for Time_tracking project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
import logging
from celery.schedules import crontab

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY: str | None = os.getenv("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True
DEBUG = os.getenv('DEBUG', 'False') == 'True'

#
# if os.getenv('ALLOWED_HOSTS'):
#     ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS').replace(' ', '').split(',')
# else:
#     ALLOWED_HOSTS = []

ALLOWED_HOSTS = [
    '127.0.0.1',
    'localhost',
    'vremya.fun',
    'f046-92-42-96-168.ngrok-free.app',
    '*'

]

if os.getenv('CSRF_TRUSTED_ORIGINS'):
    CSRF_TRUSTED_ORIGINS = os.getenv('CSRF_TRUSTED_ORIGINS').replace(' ', '').split(',')

SITE_ID = 1

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    'django.contrib.sites',
    'django.contrib.sitemaps',
    # prod only: 'django.contrib.postgres' (см. settings_prod.py)
    'accounts.apps.AccountsConfig',
    'time_tracking_or.apps.TimeTrackingOrConfig',
    'oauth2_provider',
    'social_django',
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "accounts.middleware.GuestIPAuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "Time_tracking.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                'social_django.context_processors.backends',
                'social_django.context_processors.login_redirect',
            ],
        },
    },
]

WSGI_APPLICATION = "Time_tracking.wsgi.application"

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.sqlite3",
#         "NAME": BASE_DIR / "db.sqlite3",
#     }
# }
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': 'djangodb',
#         'USER': 'mb',
#         'PASSWORD': os.getenv("DB_PASS"),
#         'HOST': '127.0.0.1',
#         'PORT': '5432',
#     }
# }

DATABASES = {
    'default': {
        'ENGINE': os.getenv('DB_ENGINE', 'django.db.backends.sqlite3'),
        'NAME': os.getenv('DB_NAME', BASE_DIR / 'db.sqlite3'),
        'USER': os.getenv('DB_USER', ''),
        'PASSWORD': os.getenv('DB_PASS', ''),
        'HOST': os.getenv('DB_HOST', ''),
        'PORT': os.getenv('DB_PORT', ''),
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'ru-ru'

TIME_ZONE = 'Europe/Moscow'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "/static/"

# если дебаг на сервере
# STATIC_ROOT = BASE_DIR / 'staticfiles'
# STATICFILES_DIRS = [BASE_DIR / 'static']

# если дебаг на сервере
# STATIC_ROOT = BASE_DIR / 'static'
# STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]

if DEBUG:
    STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]
    STATIC_ROOT = None  # Не используем STATIC_ROOT в режиме отладки
else:
    STATICFILES_DIRS = []  # Не указываем дополнительные пути
    STATIC_ROOT = BASE_DIR / 'static'  # Используем папку для collectstatic

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

EMAIL_HOST = os.getenv('EMAIL_HOST')
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
EMAIL_PORT = int(os.getenv('EMAIL_PORT', '587'))
EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS', 'False') == 'True'

EMAIL_BACKEND = os.getenv('EMAIL_BACKEND', "django.core.mail.backends.smtp.EmailBackend")

# Конфигурация сервера электронной почты
# EMAIL_HOST = "smtp.gmail.com"
# EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER")
# EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD")
# EMAIL_PORT = 587
# EMAIL_USE_TLS = True
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER
SERVER_EMAIL = EMAIL_HOST_USER

# https://docs.djangoproject.com/en/5.1/topics/email/


LOGIN_REDIRECT_URL = "/"
# LOGOUT_REDIRECT_URL = "/"

SESSION_COOKIE_AGE = 60 * 60 * 24 * 30

LOGIN_URL = '/accounts/login/'

MEDIA_ROOT = BASE_DIR / 'media'
MEDIA_URL = '/media/'

SOCIAL_AUTH_ASSOCIATE_BY_MAIL = True  # Авто-привязка соц. аккаунтов по email, если почта уже есть в базе
SOCIAL_AUTH_ASSOCIATE_EXISTING = True  # Если пользователь уже зарегистрирован, связывает учетные записи

AUTHENTICATION_BACKENDS = (
    'social_core.backends.vk.VKOAuth2',  # стандартный VK OAuth2 бекенд
    'social_core.backends.vk.VKAppOAuth2',
    'social_core.backends.google.GoogleOAuth2',
    'django.contrib.auth.backends.ModelBackend',
    'social_core.backends.yandex.YandexOAuth2',
)

# Celery
CELERY_BROKER_URL = os.getenv('CELERY_BROKER_URL', 'redis://127.0.0.1:6379/0')
CELERY_RESULT_BACKEND = os.getenv('CELERY_RESULT_BACKEND', CELERY_BROKER_URL)
CELERY_TASK_ALWAYS_EAGER = os.getenv('CELERY_TASK_ALWAYS_EAGER', 'True') == 'True'
CELERY_TASK_EAGER_PROPAGATES = True

GUEST_ACCOUNT_RETENTION_DAYS = int(os.getenv('GUEST_ACCOUNT_RETENTION_DAYS', '14'))
_guest_cleanup_hour = int(os.getenv('GUEST_CLEANUP_HOUR', '3'))
_guest_cleanup_minute = int(os.getenv('GUEST_CLEANUP_MINUTE', '0'))

CELERY_BEAT_SCHEDULE = {
    'cleanup-stale-guests': {
        'task': 'accounts.tasks.cleanup_stale_guests',
        'schedule': crontab(hour=_guest_cleanup_hour, minute=_guest_cleanup_minute),
    }
}

# google
SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = os.getenv('SOCIAL_AUTH_GOOGLE_OAUTH2_KEY')
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = os.getenv('SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET')

# vk
SOCIAL_AUTH_VK_OAUTH2_KEY = os.getenv('SOCIAL_AUTH_VK_OAUTH2_KEY')
SOCIAL_AUTH_VK_OAUTH2_SECRET = os.getenv('SOCIAL_AUTH_VK_OAUTH2_SECRET')
SOCIAL_AUTH_VK_OAUTH2_SCOPE = ['email']
# SOCIAL_AUTH_VK_OAUTH2_USE_PKCE = True
# SOCIAL_AUTH_VK_OAUTH2_REDIRECT_URI = os.getenv('SOCIAL_AUTH_VK_OAUTH2_REDIRECT_URI')

SOCIAL_AUTH_VK_APP_KEY = os.getenv('SOCIAL_AUTH_VK_OAUTH2_KEY')
SOCIAL_AUTH_VK_APP_SECRET = os.getenv('SOCIAL_AUTH_VK_OAUTH2_SECRET')
SOCIAL_AUTH_VK_APP_USER_MODE = 2  # рекомендуемый режим

# yandex
SOCIAL_AUTH_YANDEX_OAUTH2_KEY = os.getenv('SOCIAL_AUTH_YANDEX_OAUTH2_KEY')
SOCIAL_AUTH_YANDEX_OAUTH2_SECRET = os.getenv('SOCIAL_AUTH_YANDEX_OAUTH2_SECRET')

SOCIAL_AUTH_PIPELINE = (  # Последовательность обработки OAuth-авторизации
    "social_core.pipeline.social_auth.social_details",  # Получение данных о соц. аккаунте
    "social_core.pipeline.social_auth.social_uid",  # Определение уникального ID аккаунта
    "social_core.pipeline.social_auth.auth_allowed",  # Проверка, разрешен ли доступ
    "social_core.pipeline.social_auth.social_user",  # Получение существующего пользователя (если он уже есть)
    "social_core.pipeline.social_auth.associate_user",  # Связывание учетной записи
    "social_core.pipeline.social_auth.load_extra_data",  # Загрузка всех дополнительных данных
    "social_core.pipeline.user.user_details",  # Обновление информации о пользователе
)

# # Параметры для VK ID виджета (используются во фронтенде)
# VKID_APP_ID = os.getenv('VKID_APP_ID') or SOCIAL_AUTH_VK_OAUTH2_KEY
# VKID_REDIRECT_URL = (
#     os.getenv('VKID_REDIRECT_URL')
#     or os.getenv('SOCIAL_AUTH_VK_OAUTH2_REDIRECT_URI')
#     or 'http://127.0.0.1:8000/accounts/complete/vk-app/'
# )
# VKID_SCOPE = os.getenv('VKID_SCOPE', 'email')

# Логирование ---------------------------------------------------------------
# Используем стандартную конфигурацию Django без дополнительного логгера VK.
# Это исключает создание файлов на диске при старте приложения.
# LOGGING = None

# Кеширование ---------------------------------------------------------------
# Redis в качестве основного cache backend. Fallback на локальную память если нет redis / пакета.
try:
    import django_redis  # noqa: F401
    _redis_cache_url = (
        os.getenv('REDIS_CACHE_URL') or
        os.getenv('CACHE_URL') or
        f"redis://{os.getenv('REDIS_HOST', '127.0.0.1')}:{os.getenv('REDIS_PORT', '6379')}/{os.getenv('REDIS_DB_CACHE', '1')}"
    )
    CACHES = {
        'default': {
            'BACKEND': 'django_redis.cache.RedisCache',
            'LOCATION': _redis_cache_url,
            'OPTIONS': {
                'CLIENT_CLASS': 'django_redis.client.DefaultClient',
                'PARSER_CLASS': os.getenv('REDIS_PARSER_CLASS', '' ) or None,
                'CONNECTION_POOL_KWARGS': {'max_connections': int(os.getenv('REDIS_MAX_CONN', '50'))},
            },
            'KEY_PREFIX': os.getenv('CACHE_KEY_PREFIX', 'tt'),
            'TIMEOUT': int(os.getenv('CACHE_DEFAULT_TIMEOUT', '300')),
        }
    }
except Exception as _cache_exc:  # noqa: BLE001
    print(f"[WARN] Redis cache disabled, fallback to LocMemCache: {_cache_exc}")
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
            'LOCATION': 'tt-locmem',
            'TIMEOUT': int(os.getenv('CACHE_DEFAULT_TIMEOUT', '300')),
        }
    }

# Опционально включить site-wide кеш через middleware (по умолчанию выключено).
# Чтобы включить — выставьте ENABLE_SITE_CACHE=True в .env.
if os.getenv('ENABLE_SITE_CACHE', 'False') == 'True':
    # Вставляем UpdateCacheMiddleware в начало и FetchFromCacheMiddleware в конец цепочки (до CommonMiddleware уже поздно)
    _mw = list(MIDDLEWARE)
    if 'django.middleware.cache.UpdateCacheMiddleware' not in _mw:
        _mw.insert(0, 'django.middleware.cache.UpdateCacheMiddleware')
    if 'django.middleware.cache.FetchFromCacheMiddleware' not in _mw:
        _mw.append('django.middleware.cache.FetchFromCacheMiddleware')
    MIDDLEWARE = _mw
    CACHE_MIDDLEWARE_SECONDS = int(os.getenv('CACHE_MIDDLEWARE_SECONDS', '120'))
    CACHE_MIDDLEWARE_KEY_PREFIX = os.getenv('CACHE_KEY_PREFIX', 'tt')
